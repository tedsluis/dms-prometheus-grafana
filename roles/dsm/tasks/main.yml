---

- name: install podman
  ansible.builtin.package:
    name: "{{item}}"
    state: present
  loop:
    - podman
    - git
  become: true

- name: create directories
  file:
    path: "{{item.directory}}"
    owner: "{{item.owner}}"
    group: "{{item.group}}"
    mode: "{{item.mode}}"
    state: directory
  become: true
  with_items:
    - { directory: "/var/lib/dsm"                                     ,owner: "root"  ,group: "root"  ,mode: "0777" }
    - { directory: "/var/lib/dsm/prometheus"                          ,owner: "65534" ,group: "65534" ,mode: "0775" }
    - { directory: "/var/lib/dsm/prometheus/data"                     ,owner: "65534" ,group: "65534" ,mode: "0775" }
    - { directory: "/var/lib/dsm/prometheus/config"                   ,owner: "65534" ,group: "65534" ,mode: "0775" }
    - { directory: "/var/lib/dsm/prometheus/config/rules"             ,owner: "65534" ,group: "65534" ,mode: "0775" }
    - { directory: "/var/lib/dsm/prometheus/config/targets"           ,owner: "65534" ,group: "65534" ,mode: "0775" }
    - { directory: "/var/lib/dsm/prometheus/certs"                    ,owner: "65534" ,group: "65534" ,mode: "0775" }
    - { directory: "/var/lib/dsm/grafana"                             ,owner: "472"   ,group: "472"   ,mode: "0775" }
    - { directory: "/var/lib/dsm/grafana/etc"                         ,owner: "472"   ,group: "472"   ,mode: "0775" }
    - { directory: "/var/lib/dsm/grafana/etc/certs"                   ,owner: "472"   ,group: "472"   ,mode: "0775" }
    - { directory: "/var/lib/dsm/grafana/etc/dashboards"              ,owner: "472"   ,group: "472"   ,mode: "0775" }
    - { directory: "/var/lib/dsm/grafana/etc/provisioning"            ,owner: "472"   ,group: "472"   ,mode: "0775" }
    - { directory: "/var/lib/dsm/grafana/etc/provisioning/dashboards" ,owner: "472"   ,group: "472"   ,mode: "0775" }
    - { directory: "/var/lib/dsm/grafana/etc/provisioning/datasources",owner: "472"   ,group: "472"   ,mode: "0775" }
    - { directory: "/var/lib/dsm/grafana/etc/provisioning/notifiers"  ,owner: "472"   ,group: "472"   ,mode: "0775" }
    - { directory: "/var/lib/dsm/grafana/etc/provisioning/plugins"    ,owner: "472"   ,group: "472"   ,mode: "0775" }
    - { directory: "/var/lib/dsm/grafana/lib"                         ,owner: "472"   ,group: "472"   ,mode: "0775" }
    - { directory: "/var/lib/dsm/grafana/usr"                         ,owner: "472"   ,group: "472"   ,mode: "0775" }
    - { directory: "/var/lib/dsm/dsm-exporter"                        ,owner: "root"  ,group: "root"  ,mode: "0775" }
    - { directory: "/var/lib/dsm/alertmanager"                        ,owner: "65534" ,group: "65534" ,mode: "0775" }
    - { directory: "/var/lib/dsm/alertmanager/certs"                  ,owner: "65534" ,group: "65534" ,mode: "0775" }
    - { directory: "/var/lib/dsm/influxdb"                            ,owner: "0"     ,group: "0"     ,mode: "0775" }
    - { directory: "/var/lib/dsm/influxdb/data"                       ,owner: "0"     ,group: "0"     ,mode: "0775" }
    - { directory: "/var/lib/dsm/influxdb/config"                     ,owner: "0"     ,group: "0"     ,mode: "0775" }
    - { directory: "/var/lib/dsm/certs"                               ,owner: "0"     ,group: "0"     ,mode: "0775" }
    - { directory: "/var/lib/dsm/nodeexporter"                        ,owner: "65534" ,group: "65534" ,mode: "0775" }
    - { directory: "/var/lib/dsm/nodeexporter/certs"                  ,owner: "65534" ,group: "65534" ,mode: "0775" }
    - { directory: "/var/lib/dsm/karma"                               ,owner: "root" ,group: "root" ,mode: "0777" }
    - { directory: "/var/lib/dsm/karma/certs"                         ,owner: "root" ,group: "root" ,mode: "0777" }
    - { directory: "/var/lib/dsm/blackbox"                            ,owner: "65534" ,group: "65534" ,mode: "0775" }
    - { directory: "/var/lib/dsm/blackbox/certs"                      ,owner: "65534" ,group: "65534" ,mode: "0775" }

# - name: Pull images
#   containers.podman.podman_image:
#     name: "{{item}}"
#   loop:
#     - quay.io/prometheus/prometheus:v2.31.0
#     - docker.io/grafana/grafana:8.2.3
#     - quay.io/prometheus/alertmanager:v0.23.0
#     - quay.io/prometheus/node-exporter:v1.2.2
#     - docker.io/alpine:3.13
#     - docker.io/golang:1.16-alpine
#     - docker.io/influxdb:1.8.10
#   register: _image_pull
#   become: true

# - debug:
#     var: _image_pull

# - name: git clone https://github.com/Nozzie/gotsmart.git
#   ansible.builtin.git:
#     repo: 'https://github.com/Nozzie/gotsmart.git'
#     dest: /var/lib/dsm/dsm-exporter
#     version: master
#     force: yes
#   become: true

# - name: Build dsm-exporter image
#   containers.podman.podman_image:
#     name: dsm-exporter
#     path: /var/lib/dsm/dsm-exporter
  become: true

# create ca

- name: Create CA private key with password protection
  community.crypto.openssl_privatekey:
    path: /var/lib/dsm/certs/ca-certificate.key
    passphrase: "{{ _privatekey_passphrase }}"
    cipher: auto
    size: 4096
    owner: root
    group: root
    mode: 0444
  become: true

- name: Create certificate signing request (CSR) for root CA certificate
  community.crypto.openssl_csr_pipe:
    privatekey_path: /var/lib/dsm/certs/ca-certificate.key
    privatekey_passphrase: "{{ _privatekey_passphrase }}"
    common_name: dsm
    organization_name: de slimme meter.
    country_name: NL
    email_address: ted.sluis@gmail.com
    organization_name: bachstraat20
    organizational_unit_name: bachstraat20
    use_common_name_for_san: false  # since we do not specify SANs, don't use CN as a SAN
    basic_constraints:
      - 'CA:TRUE'
    basic_constraints_critical: yes
    key_usage:
      - keyCertSign
    key_usage_critical: true
  register: _ca_csr
  become: true

- name: Create self-signed root CA certificate from CSR
  community.crypto.x509_certificate:
    path: /var/lib/dsm/certs/ca-certificate.pem
    csr_content: "{{ _ca_csr.csr }}"
    privatekey_path: /var/lib/dsm/certs/ca-certificate.key
    privatekey_passphrase: "{{ _privatekey_passphrase }}"
    provider: selfsigned
    owner: root
    group: root
    mode: 0444
  become: true

- name: fetch root CA cert to localhost
  fetch:
    src: /var/lib/dsm/certs/ca-certificate.pem
    dest: /tmp/
    flat: yes
    owner: root
    group: root
    mode: 0644
  become: true

- name: copy root CA cert to /etc/pki/ca-trust/source/anchors/ on localhost
  copy:
    src: /tmp/ca-certificate.pem
    dest:  /etc/pki/ca-trust/source/anchors/
    owner: root
    group: root
    mode: 0644
  delegate_to: localhost
  become: true

- name: update CA trust on localhost
  shell: |
    /usr/bin/update-ca-trust
  delegate_to: localhost
  become: true

- name: copy root CA cert to /etc/pki/ca-trust/source/anchors/
  copy:
    src: /var/lib/dsm/certs/ca-certificate.pem
    remote_src: yes
    dest:  "{{item.path}}"
    owner: "{{item.owner}}"
    group: "{{item.group}}"
    mode: "{{item.mode}}"
  loop:
    - { owner: 'root', group: 'root', mode: '0644', path: '/etc/pki/ca-trust/source/anchors/' }
    - { owner: '472', group: '472', mode: '0644', path: '/var/lib/dsm/grafana/certs/' }
    - { owner: '65534', group: '65534', mode: '0644', path: '/var/lib/dsm/prometheus/certs/' }
    - { owner: '65534', group: '65534', mode: '0644', path: '/var/lib/dsm/alertmanager/certs/' }
    - { owner: 'root', group: 'root', mode: '0644', path: '/var/lib/dsm/karma/certs/' }
    - { owner: '65534', group: '65534', mode: '0644', path: '/var/lib/dsm/blackbox/certs/' }
  become: true

- name: get CA cert
  ansible.builtin.slurp:
    src: /var/lib/dsm/grafana/certs/ca-certificate.pem
  register: _cacert
    
- name: update CA trust
  shell: |
    /usr/bin/update-ca-trust
  become: true

- name: Create private key (RSA) with password protection
  community.crypto.openssl_privatekey:
    path: /var/lib/dsm/certs/certificate.key
    type: RSA
    size: 4096
    passphrase: "{{ _privatekey_passphrase }}"
    cipher: auto
    owner: root
    group: root
    mode: 0444
  become: true

- name: Create certificate signing request (CSR) for self-signed certificate
  community.crypto.openssl_csr_pipe:
    privatekey_path: /var/lib/dsm/certs/certificate.key
    privatekey_passphrase: "{{ _privatekey_passphrase }}"
    common_name: dsm
    organization_name: de slimme meter.
    country_name: NL
    email_address: ted.sluis@gmail.com
    organization_name: bachstraat20
    organizational_unit_name: bachstraat20
    subject_alt_name:
      - "DNS:localhost"
      - "DNS:127.0.0.1"
      - "DNS:{{ inventory_hostname }}"
      - "DNS:{{ ansible_fqdn }}"
      - "DNS:{{ hostvars[inventory_hostname]['ansible_default_ipv4']['address'] }}"
  register: _csr
  become: true

- name: Check whether certificate exists
  stat:
    path: /var/lib/dsm/certs/certificate.pem
  run_once: true
  register: _certificate_exists
  become: true

- name: Read existing certificate if exists
  slurp:
    src: /var/lib/dsm/certs/certificate.pem
  when: _certificate_exists.stat.exists
  run_once: true
  register: _certificate
  become: true

- name: Sign certificate with our CA
  community.crypto.x509_certificate_pipe:
    content: "{{ (_certificate.content | b64decode) if _certificate_exists.stat.exists else omit }}"
    csr_content: "{{ _csr.csr }}"
    provider: ownca
    ownca_path: /var/lib/dsm/certs/ca-certificate.pem
    ownca_privatekey_path: /var/lib/dsm/certs/ca-certificate.key
    ownca_privatekey_passphrase: "{{ _privatekey_passphrase }}"
    ownca_not_after: +1500d  # valid for one year
    ownca_not_before: "-1d"  # valid since yesterday
  register: _certificate
  become: true

- name: Write certificate file
  copy:
    dest: /var/lib/dsm/certs/certificate.pem
    content: "{{ _certificate.certificate }}"
    owner: root
    group: root
    mode: 0444
  when: _certificate is changed
  become: true

- name: create /var/lib/dsm/prometheus/config/rules/
  copy:
    src: "rules-{{ item }}.yml"
    dest: /var/lib/dsm/prometheus/config/rules/rules-{{ item }}.yml
    owner: 65534
    group: 65534
    mode: 0664
  loop:
    - dsm
    - linux-server
    - prometheus
    - blackbox
    - alertmanager
    - karma
  become: true
  notify: _restart_prometheus

- name: create /var/lib/dsm/prometheus/config/prometheus.yml
  template:
    src: prometheus.yml.j2
    dest: /var/lib/dsm/prometheus/config/prometheus.yml
    owner: 65534
    group: 65534
    mode: 0664
  become: true
  notify: _restart_prometheus

- name: copy prometheus web-config.yml
  copy:
    content: |
      tls_server_config:
        cert_file: /etc/ssl/certs/certificate.pem
        key_file: /etc/ssl/certs/certificate.key
    dest: /var/lib/dsm/prometheus/config/web-config.yml
    owner: 65534
    group: 65534
    mode: 0664
  become: true
  notify: _restart_prometheus

- name: create /var/lib/dsm/alertmanager/alertmanager.yml
  template:
    src: alertmanager.yml.j2
    dest: /var/lib/dsm/alertmanager/alertmanager.yml
    owner: 65534
    group: 65534
    mode: 0664
  become: true
  notify: _restart_alertmanager


- name: copy alertmanager web-config.yml
  copy:
    content: |
      tls_server_config:
        cert_file: /etc/ssl/certs/certificate.pem
        key_file: /etc/ssl/certs/certificate.key
    dest: /var/lib/dsm/alertmanager/web-config.yml
    owner: 65534
    group: 65534
    mode: 0664
  become: true
  notify: _restart_alertmanager

- name: copy node-exporter web-config.yml
  copy:
    content: |
      tls_server_config:
        cert_file: /etc/ssl/certs/certificate.pem
        key_file: /etc/ssl/certs/certificate.key
    dest: /var/lib/dsm/nodeexporter/web-config.yml
    owner: 65534
    group: 65534
    mode: 0664
  become: true
  notify: _restart_node_exporter

- name: copy blackbox web-config.yml
  copy:
    content: |
      tls_server_config:
        cert_file: /config/certificate.pem
        key_file: /config/certificate.key
    dest: /var/lib/dsm/blackbox/web-config.yml
    owner: 65534
    group: 65534
    mode: 0664
  become: true
  notify: _restart_blackbox

- name: copy certificate
  copy:
    src: /var/lib/dsm/certs/certificate.pem
    dest: "{{item.path}}/"
    remote_src: yes
    owner: "{{item.owner}}"
    group: "{{item.group}}"
    mode: 0640
  loop:
    - { owner: '472', group: '472', path: '/var/lib/dsm/grafana/etc/certs' }
    - { owner: '65534', group: '65534', path: '/var/lib/dsm/prometheus/certs' }
    - { owner: '65534', group: '65534', path: '/var/lib/dsm/alertmanager/certs' }
    - { owner: '65534', group: '65534', path: '/var/lib/dsm/nodeexporter/certs' }
    - { owner: 'root', group: 'root', path: '/var/lib/dsm/karma/certs' }
    - { owner: '65534', group: '65534', path: '/var/lib/dsm/blackbox/certs' }
  become: true

- name: copy key and remove passphrase
  shell: |
    /usr/bin/openssl rsa -in /var/lib/dsm/certs/certificate.key -out {{ item.path }}/certificate.key -passin pass:{{_privatekey_passphrase}}
    chown {{item.owner}}:{{item.group}} {{item.path}}/certificate.key
    chmod 640 {{item.path}}/certificate.key
  loop:
    - { owner: '472', group: '472', path: '/var/lib/dsm/grafana/etc/certs' }
    - { owner: '65534', group: '65534', path: '/var/lib/dsm/prometheus/certs' }
    - { owner: '65534', group: '65534', path: '/var/lib/dsm/alertmanager/certs' }
    - { owner: '65534', group: '65534', path: '/var/lib/dsm/nodeexporter/certs' }
    - { owner: 'root', group: 'root', path: '/var/lib/dsm/karma/certs' }
    - { owner: '65534', group: '65534', path: '/var/lib/dsm/blackbox/certs' }
  become: true

- name: chmod
  shell: chmod 777 -R /var/lib/dsm/karma
  become: true

- name: create karma.yml /var/lib/dsm/karma/
  template:
    src: karma.yml.j2
    dest: /var/lib/dsm/karma/karma.yml
    owner: root
    group: root
    mode: 0666
  become: true
  notify: _restart_karma

- name: create blackbox.yml /var/lib/dsm/blackbox/
  template:
    src: blackbox.yml.j2
    dest: /var/lib/dsm/blackbox/blackbox.yml
    owner: 65534
    group: 65534
    mode: 0660
  become: true
  notify: _restart_blackbox

- name: create grafana.in /var/lib/dsm/grafana/etc/
  template:
    src: grafana.ini.j2
    dest: /var/lib/dsm/grafana/etc/grafana.ini
    owner: 472
    group: 472
    mode: 0660
  become: true
  notify: _restart_grafana

- name: create /var/lib/dsm/grafana/etc/provisioning/datasources/
  template:
    src: "{{item}}.j2"
    dest: /var/lib/dsm/grafana/etc/provisioning/datasources/{{item}}
    owner: 472
    group: 472
    mode: 0666
  become: true
  loop:
    - prometheus-datasource.yaml
    - influxdb-datasource.yaml
  notify: _restart_grafana

- name: create /var/lib/dsm/grafana/etc/dashboards/dashboard.*.json
  copy:
    src: "{{item}}"
    dest: "/var/lib/dsm/grafana/etc/dashboards/{{item}}"
    owner: 472
    group: 472
    mode: 0666
  become: true
  with_items:
    - dashboard-smartmeter.json
    - dashboard-nodeexporter.json
    - dashboard-fijnstof.json
    - dashboard-prometheus.json
    - dashboard-alertmanager.json
    - dashboard-blackbox.json
  notify: _restart_grafana

- name: create /var/lib/dsm/grafana/etc/provisioning/dashboards/dashboard.*.yaml
  copy:
    src: "{{item}}"
    dest: "/var/lib/dsm/grafana/etc/provisioning/dashboards/{{item}}"
    owner: 472
    group: 472
    mode: 0666
  become: true
  with_items: 
    - dashboard-smartmeter.yaml
    - dashboard-nodeexporter.yaml
    - dashboard-fijnstof.yaml
    - dashboard-prometheus.yaml
    - dashboard-alertmanager.yaml
    - dashboard-blackbox.yaml
  notify: _restart_grafana

- name: influxdb influxdb.conf
  template:
    src: influxdb.conf.j2
    dest: /var/lib/dsm/influxdb/config/influxdb.conf
    owner: 0
    group: 0
    mode: 0666
  become: true
  notify: _restart_influxdb

- name: create pod
  containers.podman.podman_pod:
    name: dsm
    state: started
    ports:
      - 3000:3000
      - 8080:8080
      - 8086:8086
      - 9090:9090
      - 9093:9093
      - 9100:9100
      - 8081:8081
      - 9115:9115
  become: true

- name: set permissions and baud rate
  shell: |
    stty -F /dev/ttyUSB0 115200
    chmod 666 /dev/ttyUSB0

- name: create dsm exporter container
  containers.podman.podman_container:
    name: dsm-exporter
    image: localhost/dsm-exporter:latest
    device: /dev/ttyUSB0:/dev/ttyUSB0:rwm
    privileged: yes
    pod: dsm
    command: '-device /dev/ttyUSB0'
    state: present
    recreate: yes
    expose: 8080
    generate_systemd:
      path: /etc/systemd/system
      restart_policy: on-failure
      names: true
  become: true
  
- name: create node-exporter container
  containers.podman.podman_container:
    name: node-exporter
    image: quay.io/prometheus/node-exporter:v1.2.2
    pod: dsm
    pid: host
    command: 
      - '--path.rootfs=/host'
      - '--web.config=/etc/web-config.yml'
    state: present
    user: 65534
    recreate: yes
    expose: 9090
    volume:
      - "/:/host:ro,rslave"
      - /var/lib/dsm/nodeexporter/web-config.yml:/etc/web-config.yml:z
      - /var/lib/dsm/nodeexporter/certs/certificate.pem:/etc/ssl/certs/certificate.pem:z
      - /var/lib/dsm/nodeexporter/certs/certificate.key:/etc/ssl/certs/certificate.key:z
    generate_systemd:
      path: /etc/systemd/system
      restart_policy: on-failure
      names: true
  become: true

- name: create prometheus container
  containers.podman.podman_container:
    name: prometheus
    image: quay.io/prometheus/prometheus:v2.31.0
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--storage.tsdb.retention.time=1500d'
      - '--storage.tsdb.retention.size=15GB'
      - '--web.config.file=/etc/prometheus/web-config.yml'
      - '--web.external-url=https://dsm/'
    pod: dsm
    state: present
    user: 65534
    recreate: yes
    expose: 9090
    volume:
      - /var/lib/dsm/prometheus/config:/etc/prometheus:z
      - /var/lib/dsm/prometheus/data:/prometheus:z
      - /var/lib/dsm/prometheus/certs/certificate.pem:/etc/ssl/certs/certificate.pem:z
      - /var/lib/dsm/prometheus/certs/certificate.key:/etc/ssl/certs/certificate.key:z
      - /var/lib/dsm/prometheus/certs/ca-certificate.pem:/etc/ssl/certs/ca-certificate.pem:z
    generate_systemd:
      path: /etc/systemd/system
      restart_policy: on-failure
      names: true
  become: true

- name: create alertmanager container
  containers.podman.podman_container:
    name: alertmanager
    image: quay.io/prometheus/alertmanager:v0.23.0
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
      - '--web.config.file=/etc/alertmanager/web-config.yml'
    pod: dsm
    state: present
    user: 65534
    recreate: yes
    expose: 9093
    volume:
      - /var/lib/dsm/alertmanager:/etc/alertmanager:z
      - /var/lib/dsm/alertmanager/certs/certificate.pem:/etc/ssl/certs/certificate.pem:z
      - /var/lib/dsm/alertmanager/certs/certificate.key:/etc/ssl/certs/certificate.key:z
      - /var/lib/dsm/alertmanager/certs/ca-certificate.pem:/etc/ssl/certs/ca-certificate.pem:z
    generate_systemd:
      path: /etc/systemd/system
      restart_policy: on-failure
      names: true
  become: true

- name: create influxdb container
  containers.podman.podman_container:
    name: influxdb
    image: docker.io/influxdb:1.8.10
    command: '-config=/etc/influxdb/influxdb.conf'
    pod: dsm
    env:
      INFLUXDB_ADMIN_USER=influxdb
      INFLUXDB_ADMIN_PASSWORD={{_influxdb_password}}
      INFLUXDB_DB=luftdaten
    state: present
    user: 0
    recreate: yes
    expose: 8086
    volume:
      - /var/lib/dsm/influxdb/data:/var/lib/influxdb:Z
      - /var/lib/dsm/influxdb/config/influxdb.conf:/etc/influxdb/influxdb.conf:Z
    generate_systemd:
      path: /etc/systemd/system
      restart_policy: on-failure
      names: true
  become: true

- name: create grafana container
  containers.podman.podman_container:
    name: grafana
    image: docker.io/grafana/grafana:8.2.3
    pod: dsm
    state: present
    user: 472
    recreate: yes
    expose: 3000
    volume:
      - /var/lib/dsm/grafana/etc:/etc/grafana:z
      - /var/lib/dsm/grafana/lib:/var/lib/grafana:z
    generate_systemd:
      path: /etc/systemd/system
      restart_policy: on-failure
      names: true
  become: true

- name: create karma container
  containers.podman.podman_container:
    name: karma
    image: ghcr.io/prymitive/karma:latest
    command:
      - '--config.file=/karma.yml'
    pod: dsm
    state: present
    #user: 
    recreate: yes
    expose: 8081
    volume:
      - /var/lib/dsm/karma/karma.yml:/karma.yml:z
      - /var/lib/dsm/karma/certs/certificate.pem:/certificate.pem:z
      - /var/lib/dsm/karma/certs/certificate.key:/certificate.key:z
      - /var/lib/dsm/karma/certs/ca-certificate.pem:/ca-certificate.pem:z
    generate_systemd:
      path: /etc/systemd/system
      restart_policy: on-failure
      names: true
  become: true

- name: create blackbox container
  containers.podman.podman_container:
    name: blackbox
    image: quay.io/prometheus/blackbox-exporter:v0.19.0
    command:
      - '--config.file=/config/blackbox.yml'
      - '--web.config.file=/config/web-config.yml'
    pod: dsm
    state: present
    user: 65534
    recreate: yes
    expose: 9115
    volume:
      - /var/lib/dsm/blackbox/blackbox.yml:/config/blackbox.yml:z
      - /var/lib/dsm/blackbox/web-config.yml:/config/web-config.yml:z
      - /var/lib/dsm/blackbox/certs/certificate.pem:/config/certificate.pem:z
      - /var/lib/dsm/blackbox/certs/certificate.key:/config/certificate.key:z
      - /var/lib/dsm/blackbox/certs/ca-certificate.pem:/config/ca-certificate.pem:z
    generate_systemd:
      path: /etc/systemd/system
      restart_policy: on-failure
      names: true
  become: true

- name: start and enable services
  systemd:
    name: "{{item}}"
    state: started
    daemon_reload: true
    enabled: true
  loop:
    - container-dsm-exporter
    - container-node-exporter
    - container-prometheus
    - container-alertmanager
    - container-influxdb
    - container-grafana
    - container-karma
  become: true

- name: container state
  shell: |
    podman ps -a --format "{{ '{{' }}.Status{{ '}}' }}  {{ '{{' }}.Names{{ '}}' }}  {{ '{{' }}.ID{{ '}}' }}" --filter 'name={{item}}'
  register: _container_state
  loop:
    - dsm-exporter
    - node-exporter
    - prometheus
    - alertmanager
    - influxdb
    - grafana
    - karma
    - blackbox
  become: true

- debug:
    var: _container_state

- name: trigger handelers
  meta: flush_handlers

- name: "pause until grafana is reachable"
  uri:
    url: "https://{{inventory_hostname}}:3000/login"
    follow_redirects: none
    method: GET
  register: _result
  until: _result.status == 200
  retries: 100 # 60 * 5 seconds = 5 minutes
  delay: 5 # Every 5 seconds

- name: set grafana password
  shell: |
    podman exec grafana /usr/share/grafana/bin/grafana-cli admin reset-admin-password {{_grafana_admin_password}} --config=/etc/grafana/grafana.ini || echo "set password failed."
  become: true
  register: _set_grafana_password

- debug:
    var: _set_grafana_password